MOD = 10**9 + 7

class Solution:
    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
        dp = [0] * (n + forget + 1)  # Extended array to prevent index out of range
        dp[1] = 1  # On day 1, one person becomes aware of the secret
        total_sharing = [0] * (n + forget + 1)  # Number of people sharing on day `i`

        for day in range(1, n + 1):
            # Update the number of people who are sharing on day `day`
            if day > 1:
                total_sharing[day] = (total_sharing[day] + total_sharing[day - 1]) % MOD

            # The number of new people who become aware of the secret on day `day`
            dp[day] = (dp[day] + total_sharing[day]) % MOD

            # People who became aware of the secret on day `day` will start sharing after `delay` days
            start_day = day + delay
            if start_day <= n:
                total_sharing[start_day] = (total_sharing[start_day] + dp[day]) % MOD

            # They will forget the secret after `forget` days
            forget_day = day + forget
            if forget_day <= n:
                total_sharing[forget_day] = (total_sharing[forget_day] - dp[day]) % MOD  # They stop sharing

        # Sum the number of people who are aware of the secret but haven't forgotten it by day `n`
        result = 0
        for day in range(n - forget + 1, n + 1):
            result = (result + dp[day]) % MOD

        return result
