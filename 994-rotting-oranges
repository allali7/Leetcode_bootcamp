from collections import deque

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        queue = deque()
        fresh_count = 0
        
        # Step 1: Initialize queue and count fresh oranges
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 2:
                    queue.append((r, c, 0))  # (row, col, time)
                elif grid[r][c] == 1:
                    fresh_count += 1
        
        # Step 2: BFS to rot fresh oranges
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up
        time_elapsed = 0
        
        while queue:
            r, c, time_elapsed = queue.popleft()
            
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                # If adjacent cell is a fresh orange, rot it
                if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1:
                    grid[nr][nc] = 2  # Mark as rotten
                    fresh_count -= 1
                    queue.append((nr, nc, time_elapsed + 1))
        
        # Step 3: Check if there are any fresh oranges left
        return time_elapsed if fresh_count == 0 else -1
